import { DeepPartial, EntityState, ID, IdGetter, StStoreOptions } from './type';
import { BehaviorSubject, Observable } from 'rxjs';
export declare class StStore<T, S extends ID = number, E = any> {
    constructor(options?: StStoreOptions<T, S>);
    idGetter: IdGetter<T, S>;
    options: StStoreOptions<T, S>;
    private timeout;
    cache$: BehaviorSubject<boolean>;
    private state$;
    private setInitialState;
    getState(): EntityState<T, S, E>;
    selectState(): Observable<EntityState<T, S, E>>;
    hasCache(): boolean;
    setHasCache(hasCache: boolean): void;
    private setState;
    private updateState;
    set(array: T[]): void;
    add(entityOrEntities: T | T[]): void;
    remove(idOrIds: S | S[]): void;
    remove(callback: (entity: T, key: S) => boolean): void;
    update(id: S, partialOrCallback: DeepPartial<T> | ((entity: T) => T)): void;
    updateProperty<K extends keyof T = keyof T>(id: S, property: K, value: T[K]): void;
    upsert(entities: T[] | DeepPartial<T>[]): void;
    upsert(key: S, entity: T | DeepPartial<T>): void;
    private formatActive;
    setActive(idOrEntity: S | T | Array<S | T>): void;
    addActive(idOrEntity: S | T | Array<S | T>): void;
    removeActive(idOrEntity: S | T | Array<S | T>): void;
    toggleActive(idOrEntity: S | T): void;
    removeActiveEntities(): void;
    private updateActive;
    replace(id: S, entity: T): void;
    setLoading(loading: boolean): void;
    setError(error: E): void;
    reset(): void;
    preAdd(entityOrEntities: T | T[]): T | T[];
    postAdd(entityOrEntities: T | T[]): void;
    preUpdate(entityOrEntities: T | T[]): T | T[];
    postUpdate(entityOrEntities: T | T[]): void;
    postUpsert(): void;
    postDelete(): void;
}
